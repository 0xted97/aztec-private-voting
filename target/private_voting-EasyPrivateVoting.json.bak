{"noir_version":"1.0.0-beta.7+0000000000000000000000000000000000000000","name":"EasyPrivateVoting","functions":[{"name":"add_to_tally_public","hash":"9601835013787911724","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"candidate","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2024020833944022298":{"error_kind":"string","string":"Function add_to_tally_public can only be called internally"},"3557153117338734214":{"error_kind":"string","string":"Vote has ended"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+VazW4jRRDuyXhsjx2vzZ+ExAVxQBw9/kt8WBG0zv6AtAhWiEVaCTn2GEVaWJRdEMd5AyTEnQvvgMQTICFx4sCNOxdegXTSFX/+pmZsb2ZCECVFPZ6qrr+urqruiWeW4LmxQr+NQnPgxu7lICqQV1dVNA+E5pF7CN3vHcD7BRobktwi+e93B7NQsa9A/fuh41mmf4RnCfy7NcfnvWTJn22x0HK/MYZkTv30b9csn19xzyHNKWNtS/R99yVF/x2wzcKtpBTZfeE/Af6mQNuE/2E5+l/wv+34l6H7nXJ8c5GT7pbjmwv+94r3zQXvd8vRvdc053v8geNn933HPU+//vz9L2dP5vE78/lJ/PQp5grep3mwDU9/C56vMs/7Xz1+fLw4jk8Ovzl++izFWyv68rxD73Yy9ML3CAHJeM2N1refgM5t1vlB/MU8PrlOrjVkSmCyywib/bobrdmP3DOndQsHbuxeDvrW/pfZ/gfPnpxMP4s/jKfzTX2wqf99kw4l5ukrPCoKDz9HnkfvNXkWJsn5yGv0lhvtOnzqnktch15L0c0juWxDQbL7HskzJr0mKL9hSm3BIs+sX3MD6yC+CxRdOwoOYwVxKCdQ5Gi8eI1Kar0GLZP2icmxn9vUKtBLKRRcDXCTZMmDwaffaK/dJ0cgk+lYV4yrIINnQLQWboN+6I+KMt/CJFnlJXRvg96/uudtc2FWjmM6L4OO8czXgrREbZNdQzxlnq+84zjW8mfJuWbIsYrAsarFMcYqx3EdcJNkyYNBi2Oxd9s4xvWoEi3XeFyLTeI4r04J3QegN8axHDk5jj8+OX4WG4J1vZvW4yHYHlj67EqyasCBe9+9BOztd7sXzUGydISv6FIBPNI/dL8bYJeMlUvoudibRov+dDEdTufzwWz6IvFHvzVLkH8UR3F/sVj04+lgMVpcufxoFo1mg/54f9wf9+bRlcvvR8P5/lE8jnvTUTfeH62Tj2c1LvYc+5IMcWMfPJ+eEb8QeTXQkXURuVrS9DJ0LLrx0IqX1hyK/IbRm5GDYvS5aA6rpE9W08bFAed2TLpwcGKuK3Lqipyr4qU1dBwLaGuRxXvTWBD5DVNqbEZ5fq0qfhXfhYquHcJZ4PULFTmhIue/wgvzj9ZgeRmjyOF3LKcGNAHJCQqUk5czqwXKQV6HyaqceoFytEZWDgC4dh49bxsHOF/otIOm2Grt/zZDZmDSlzsWpEkPiP4ns+T5nVmlER99DzQ/uOcyv6GcwphzBILgsIfh/dMEHMf8LuA4TluAqxPuBuggB0KMHwHtYCN0ludvwJfpBNDXbZP2dZ14axdsyG+SnI98CPrRjWV/z+N+EGX9n2LpeeKl5i35Mp2AFiM1wu0odgjOV+zQ6odHOK1n5zyN/LXcit/LkNYY/QJFvn9pNsvcptksNyJvzo0/u9Ha8YtZ1bFh0jpqtUTeNxV6jDnRR6svMjdU5hW4T45aiq4CWrzzPsF4531yA3C8T9qA45zbARz/TwaCtofET9vkXF5nrZZjXZVY5HqNc7FeF33u7vbms1HcO72a2RtFvfF8m3O3xFqVdEH7ZY3xPfZfk+R8DIj+dzeWfBZS60o9xz4/xz7tzHIrw76/3Whp/9hAXttk59K24qMdwmHs8xpJTAUb2iD0f7rRyj2gGiP3dahzmXeLpzCwetwCPTjPBsmq3Xk51QLn4F2FHms71z3MdfyxSftYhT6/S7qKD6sKPfLjOPvLjWff371V/TDmG6Q72s5na1+RK7is/FV1wkq+59rTzr8C2h2SRzjcJ3zfwHUTcRgHef9UqdUZ8cW2vVpVsUPLE5wL6oqu2r4V/v/GvsW6yftW652QXvZOx6TXjeMV90BIONwDNcL5OfJw/cXXuAe4jmp3KYfJcl7DW/LDdcF8jXM5Xwv9G96SZ8s9t006P3G8aHmGdTEm/84u746n7LvvvDux63rXWitHn9y7Vu3eXfwTlrQ2eXu6pujzgjk/C/CaoX7CS+s5tXjn3JnXf2m5U8slnGc2ySVaD6HlkqbZrjfV8gTnEaR/E/LETS/bN9wfbXp/L/Ta2Qj9y3cMuCdCwmk1PS+26jl6rTtrs17aWdsostfZwHs+S8Y1qNlDrWaj7Vyz83pnC7wGLYVe66c7RI8+1/Yl97Iot0k43E+8Z7P63JsZtRrtwDzL539tf2IPUPT5fzYcHc0Gw2k3Pvu03Vt3/pe7lmoCdiWrc2rut5yJmR7vy5D+DuSdexBbZ7SKPEv3MIfOyxjPeCjvKsnquzBJ0/tJml5kN5K0joJrAg73hoVd9xv9hbxEj4DoP4LcbKEOc2R+R5FfJ/kreivv+B/kmgp9U6G363Of4hZtL7qvOZNJ/PEd6yaxU8b/s5xuqb3ZdC+KxoMoHkTDdfvqH2NqNHCdNwAA","debug_symbols":"tZnRbiI5EEX/hec82GWXXc6vjEYjJkNGSIhETLLSKsq/bxVdtxuQ2mK6Ny+5hwAXl31dbZqPza/dz/ffP/bH55c/m8dvH5ufp/3hsP/94/DytH3bvxz1vx+bYH+INo/5YUNp81hV8uYxBlVWjarFtaray0TVXtdU5WGTgmt0VTdKqslV/YhV2bW4qh8VVXFtg2b1o6YaXck1uWZXdi2u1VVc26CsfolUoyu5Jtfsyq7FtbqKq/olHXcJrtGVXNUv67wV9cs6X0X9ss5XKa7VVf2yzl9pg9bgGl3JNblmV3YtrurH+nlVXNugElzVj3Vczf6v8xqDPVENIkA/iptBAmQAAwqgAgTQHGIARACcozqXYJABDCiAChBAc6AAiAACwJngTHC2yLIYVIAAmoPFdoAIIEACZAAD4JzgbPEt0aA5WIAHSAB7DRk0BwvlABFAgATIAAYUQAWYoYYqWioLG0QAARLADC0JFs0BCqACBNAcLJ8DRAABEgDOFc4VzhXOFc4VzpbUYjm0qA5ghjarYm+3/EgFCEDfXm2VWwBEAAESIAMYUAAVIANQCAB7ylqeRb2SQXOwqA8QAQSwD00G9hHWKS3YAwigOViwB4gAApgPG2QAAwqgAgTQHCzYtRhEAAESIAMYUAAVYIbn60EARAABEiADGFAAFSAAODOcbRdUMSBAAmQAAwoA08uYXsb0FkyvJbw2A31KbHEtzwNEAAGSr7vleQAGFACyYXkeoDlYngeIAALAWeAscBY4C5wFzueE2+At4XL+Twawj9nyPEAFCMBKJrtCB0AEWMl2cbbOP0AGuHMKBVABAvDJTDEAIoAACZABcI5nw8/Phw0OIz/eTrudnUUuTid6ZnndnnbHt83j8f1weNj8sz28n1/053V7POvb9qTPquXu+EtVDZ/3h53R58P07jD/Vu3s1j7Pb9fm3tpooVe3K5PYMQlE8AiZLizKlQXNW2Rp1S1y07fBotKVQ5p3kJwwD5LzrEO3jNZQhl6BZ8vg1WWUry3Drsu+GjK/GtKxYOukg0VJcW4Qbd6hccAgGnNcWYYeembL6IVbLwFjMLX5h/lwd6LJoWJFFGW2lG42x1gIR5qz6JeSylQKl/lS1sczrs/n/avCMltKzyQLKtEj5LSwfN35YieieiIfQ66HvGkUItddqzOMKmMpVVKamw3q5LwW+3I5WBQOsxbUr2TqXLnNBqxfSphKybMxp9zZKXb6GzaKTAapxEWrSnFuVXsOXMZtwhfN78aBau+SOF0Rc8xTLup1OqnXQGUcRbuYiUz3OzAcKNCsQ+otqO5wLGjjKZt60rn26IQzMTKR47TX9Tx+/2xqzxkX5KJf3M5m6rTPUgNWpOqBdvKIN7ORu9sMFhc9/Hav35usi0W9SVYq6ztOqqs7TpLVHSe1/6Hj3DmhJeQlm73EPB1TZi8CmdZv9pzWbvauw12bPfP6zZ7L2s3enc07N3uW9Zs9t6/c7JfJynUuWdw7v+YQx2RRnR0Fd+ZTaEyn6PfkuU3GvaNnKOPRU+8vzlrk3mbnMh3FS2gLNrveHELro3jRc27T1bfIo0XJyywa1kRvQLVZC+7kkwkR5xSWOYyH8BJ5URmUpjIuvm//jUURHOP1zlBaZFHj2LVqZypK+loPvYkbxr16sd3/yqOOR1ftVbTMo4Wx+TVatio0lqJ3OJftEr2jBQu9KbVsFGMXV7dFhVzdESqLQq6/nITphCHLLMo4iijLRpHGzaq4bBRMYboo1mUWZbquSltWyJTORMsKSXm6VciLCql5PLzmssSgjSfoxouKaAHr2WjZCMZMtcorS7g1+K4Pt0/709Vv1J9mddpvfx52/vD5/fh08ezbv694Br9xv55enna/3k87c5p+6NY/35L+Jq0L+d1+v9SHestbxB5Ee06HlnL9/mlD+Q8=","names":["add_to_tally_public"],"brillig_names":["add_to_tally_public"]},{"name":"cast_vote","hash":"7207129469714445484","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"candidate","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"struct","path":"aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["cast_vote"],"brillig_names":["get_public_keys_and_partial_address","decompose_hint","lte_hint","get_key_validation_request","notify_created_nullifier_oracle_wrapper","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert"]},{"name":"constructor","hash":"10275929030027379082","is_unconstrained":true,"custom_attributes":["initializer","public"],"abi":{"parameters":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZvbblw3DEX/ZZ79IFEUJeVXiiBwEqcwYDiBmxQogvx7SR1tnhkXEqZnnJdwjS9bFEXqGv88fX74+OPPD4/PX77+dXr3x8/Tx5fHp6fHPz88ff10//3x67N+9ecp2D+UTu/47kR8elfU5M3IZspm6mZaN0l/raqJm6HNpM3wZvJmVCUGtWXYOqwKxXR34jBsHJaGTcPysCoX1UeWYcuwddi22RyGNT1RS8OmYU2vqc3DyrBl2Dps26yoHqm/EodVPSK1aVjVI9WVPKwMW4atw7bNFtPTuJQ4LA2rekn1Cw+bh5Vhy7B12LbZGoZVvRTV0rBpWB42DyvDlmHrsKancWth2DgsDZuG5WHzsDJsGVb1WP1pbbMxBEAEECABGJABAiiACoByhHKEcoRyhHKEcoRyhHKEcoRyhDJBmUw5GhAgARiQAQIogApoA6xwNoBygnKCcoJygnKCcoJygnKCMkOZocxQZigzlBnKDGWGMkOZoZyhnKFsRcVkkAAMyAABFEAFtAFWXBtEgCkngwRggClnA1OuBqqcbZisyLI5ZlXWwcpsA1XOYqDK0r+SAKosbKDKUgwEUAAV0AZYwW0QAQQw5WbAgAwQQAFUQBtgpbeBKhfrlxXfBgnAgAwQQAFUgE3WGjqyGtwgAgiQAAzIAAEUgCmLgSmrq2Q1WO1bVoMbECABGJABAiiACmgDCMoEZYIyQZmgTFAmKBOUCcoE5QTlBOW+gNkC2JewDgzIAAEUQAW0AVaDG0SAKWeDBGBABgigACqgDbAa3CACTNmGwGpwAwaocrN+WQ02Gy+rnRg7iZOteLEv9NXJVr1YbdUPTtGJnJITO2UncSqg2lXMOyuXaEspWb3oFGvETtlJnIpTdWogK5tB0YmcvI3mbTRvo3kbzdto3kZDGykEp+hETsmJnXobZCROBRSDU/+5ZCROxak6NRAFp+hETsmJnfoezLZtVJyqUwNZYQyKTuSUnNgpO3Wf2bZ/3b9sFJ3IqfsnRuyUncSpOFWnBuq7vI2iEzm5si05zdyzJaeDLTkbRAABEoABGSCAAoCylUyzja5VzAYRQIAEYEAGCKAAKgDKFcoVylYHrRn0wev76eAUncgpOfXBsxTtKR8sCXvKb9QGcU/5jaITOSWnrtd38tlJnIpTdWqgXgYb9TZsHx/JKTmxU3YSp+JUQb1IQjaKTuSUnNgpO4lTcapODZS8jeRtbOUiRsmJnbKTOBUnjAInHwX2UWAfBUbRcS+XUI2KU3VqoF4uoRlFJ3JKTuyUncSpOFWnBhJvQ7wN8TbE2xBvQ7yNbVEKRmVQ7jkUo1FflMjOdMEpOpFT2ooiW7pskAECKIAKaAMsZTaIAAJAmaBMUCYoE5QJyj0/eg96ftgpNvdc2CjD754LGxWn6tR7byfangsbRafe+2yUnNjJ22Bvg70N9jbYI5w9wtkjnD3CPVM2YidvI2/Kv37dnXDF8OH7y8OD3TCc3TnoTcS3+5eH5++nd88/np7uTn/fP/3oP/TXt/vnbr/fv+h3NQsenj+rVcEvj08PRr/u9t8O81/Vcxa18et61KrsEppwFyJxIZJt77RpSJQzCbmQoLkEV1sjugS3sEsUulBIc4XKCXGoWu8zhVU3JHkopNK0G3kuoTvTOCR035l2Cbn0QhZeVJvnNy9qnktc7YVMJa6ORZvGos0liqAfpew+8PUuFPJAlFKmLsSFhu7jkFa6GQvzSCxSU49chGjq6WSucbUf6dCInIfjok5fhSP/xiGpHPbcnBe6HZFmGjp3wwmdsmlap3XhRsiEBFeWucjKD914wA/dCxyTsC0UJNpMghYRlYbcKmEfU0uzq4dE9iGpcT73LqbOnKuHQsK8H7yYfWNFKCqdRfP1KkL5DYZ16QjlCkdSWDhSfq+Gno4RUz3i7jNPeSXRVjH1Objq5aBL6OH5f2hYxIeGtIMaxTX01mqqkRaTaGkBW4TSzla1/2gs0lQPrtginG0y9Err+lqJtNfKfApNiyTVew3kRtJr4rmGvEFAyxsEtN4a0NRWa2PznQadzRz/S4Mq0lxvHOmYRomIhl65hWPJ4TtQvUVO87VtIdEaxlUvkOdzMfNqeeTqy6Psbugt37Vu6FV1cDcu5uJXbixSNIcCDcXp6sirWZQ9oDVHOrAhp73W6HwO/U9HFpnRMhKjtXgkmjqovDsxH9Sw2nYhEKXudZYvD2l5MXvqm5UvjHrXsvtQ66XG6nxEsq/QdXo+yqu1NXhHql5WTyVWa7w+d2FM9XZ9vtkIKzeSd6RMw1neIJz19nC2m8Mp4TeHs/guo7VZOGWRnZIiFCSdzZyv+7FKziIYkVoqHekF8y4w7cVqYU/h7Ih2trDXcqkhbzAcKxES3wXro1GbO1Jv3zquNa7bOq41rtvplHj7TqfQrTuddXr4QpJSTdNRKYv5U69l3I2Syiw5ysKNJhHrchOeFsqyJ5yRX/p4FOc9WcygzU97ujru8YyX82dZneH75e6olLM7Kn1uutoLfRHhs/Pi1I8abs+uGm/Nrkq376OXGlfuo5caV+6j1/kVsudXmudXlZtX11puXl1r/b2ra9QnYj906rqSp7cJbaGSC/yQMN+CtnjzBXujm2/YV/3YZy9J8wv2dvsc2m6fQ1fD4W8meVEkKwEfDIn5iIA+cHpWBTkmEX049YmsHpMQ90IvhA9JpP3Yrc/rhyQyeUf01e6YhPhzR67tWEfC/pBGxzqSfBMbUz7UkWsn8JUXst8oSznWkVL2t4pGhyTaHs5GhyQK+906yxGBxljIWj4Uh+ZHikbHPPD6aiXf2IVjAvqEvr9xnL1opnr1G7O+hrtE5oMSfhOkavGIBMXkl3MxH6oMlfCroCh8TOK6jd5KgtIuwYcqg6T6DaG0dMwLnyWIyrFwJr/I0S7FY14s9rzv9eP9p8eXi7/j+GViL4/3H58exscvP54/nX33+z/f8B38Hci3l6+fHj7/eHkwpf2PQfSfP1g3Ztzae/vv9vrRHo5Ikn2M+jGHcJcDvf9lzvwL","names":["constructor"],"brillig_names":["constructor"]},{"name":"end_vote","hash":"15013682163554157967","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[],"return_type":null,"error_types":{"5393481700152071577":{"error_kind":"string","string":"Only admin can end vote"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/71VQUvDMBTOtg6tFRSnoOBFQfCYrq1tbxX0qqAHz7FJpDCdtFU87qe74IuNaTs72u6D8hKSfu99X17IABUYQDRQC0iSS4gmxKGyPlp+EcxxO9imlrdL/gC7rlmhr8P6HRM4B/3wY8nfk/94C3huFgW/qkXm3V5+ljLeRUV/9KVfnl+f+icrNFug9RTmQvM+jMnn6/17PKfsmtKUZZn8v8rDVViHc7gG57HOefcxmyU8YentV5LlJe5RBbccD1G1Nr0udZ+Kqh4RiCDidrDHmoYJRHF25zU1dJlf+H0IXL9+P+bzlLywB0Zo03Ns2kMi314pH3ujLG1yrHUQe+TbMUbV105dk3tPIAq7L2CsX1uBCCJuB0fIPyrJ/7H7KU1yhjTo/VvXz3X9a6HiHTQWfw2JOhDlBxjLGkbAP0aF4SoMZV3dfwbzHUWXjEaLOrlPbO4QTjxCqRuTA41f9c3qIf8zs5nDOXcYcfkV33h+l9DQ59iPg+nU88Lwv/zf1K7aYZEJAAA=","debug_symbols":"tZXdbrMwDIbvJcccxM6fw61UVUVbOiEhWjH4pE8V9z6zEQqTnINNO+EFQh78OnbyVNf6PL6dmu52f1fl4anOfdO2zdupvV+qobl3/Pap9HwBo0pbKLCqDCxOlaBZPSuwhkVp0cjqC4V6UWCNrKhK5HloFrWLMg8dq591mgqVIjgNfV3PAWxC4kAfVV93gyq7sW0L9a9qx8+P3h9V96lD1fMok+vuysrAW9PW891UvGZreSoY5+0yHYyPcUWAjjsIZCAaMTG0xQ3C7xAoIyzFsCBs5GkJEXBHMDKBrEl5IGtFQtZGjMkGQBRtuF/b8H9rw9G6GiSvBmUQLriE8AakIKJMiE6nIKJz8EsbgLKNXHEHWheUdFgRbt8ekKlLALtmAsKrwYBoz8hUZiBI7RHIGDEXNoPw83bzhfBOiwiXd/IqbxtRguQSSrPPJaGbuvie0CAjnA6pvvmWRCeUa5G1ycjBj3xsC8NYyUc2E2Hd8ih6iYC5Arc6rSlYDGJpYaY8Cdfdm5DE3QJz+6b2azYBxAVBmyst51+96nXcQY78VF2afnfaTjOtb6pzWy+Pt7G7bEaH/480kk7rR3+/1Nexr2fS5sjm6wGpMObIJzKfwAcTChOP0/zrDw==","names":["end_vote"],"brillig_names":["end_vote"]},{"name":"get_active_at_block","hash":"7542738216218754575","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16775516380094354375":{"error_kind":"fmtstring","length":40,"item_types":[]},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]}}},"bytecode":"","debug_symbols":"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","names":["get_active_at_block"],"brillig_names":["get_active_at_block"]},{"name":"get_admin","hash":"2370364556520275468","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16775516380094354375":{"error_kind":"fmtstring","length":40,"item_types":[]},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]}}},"bytecode":"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","debug_symbols":"","names":["get_admin"],"brillig_names":["get_admin"]},{"name":"get_vote","hash":"16596861939967252729","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"candidate","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16775516380094354375":{"error_kind":"fmtstring","length":40,"item_types":[]},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]}}},"bytecode":"","debug_symbols":"","names":["get_vote"],"brillig_names":["get_vote"]},{"name":"get_vote_ended","hash":"14188327364273103007","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16775516380094354375":{"error_kind":"fmtstring","length":40,"item_types":[]},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]}}},"bytecode":"","debug_symbols":"","names":["get_vote_ended"],"brillig_names":["get_vote_ended"]},{"name":"process_message","hash":"12794529601519263095","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"message_ciphertext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":17,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"message_context","type":{"kind":"struct","path":"aztec::messages::processing::message_context::MessageContext","fields":[{"name":"tx_hash","type":{"kind":"field"}},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"first_nullifier_in_tx","type":{"kind":"field"}},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"private"}],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16775516380094354375":{"error_kind":"fmtstring","length":40,"item_types":[]},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]}}},"bytecode":"","debug_symbols":"","names":["process_message"],"brillig_names":["process_message"]},{"name":"public_dispatch","hash":"4160979279533511902","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2024020833944022298":{"error_kind":"string","string":"Function add_to_tally_public can only be called internally"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"3557153117338734214":{"error_kind":"string","string":"Vote has ended"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5393481700152071577":{"error_kind":"string","string":"Only admin can end vote"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"sync_private_state","hash":"3716768604145967603","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16775516380094354375":{"error_kind":"fmtstring","length":40,"item_types":[]},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]}}},"bytecode":"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","debug_symbols":"","names":["sync_private_state"],"brillig_names":["sync_private_state"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"EasyPrivateVoting::add_to_tally_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EasyPrivateVoting::add_to_tally_public_parameters","fields":[{"name":"candidate","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"EasyPrivateVoting::cast_vote_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EasyPrivateVoting::cast_vote_parameters","fields":[{"name":"candidate","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"EasyPrivateVoting::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EasyPrivateVoting::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"EasyPrivateVoting::end_vote_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EasyPrivateVoting::end_vote_parameters","fields":[]}}]},{"kind":"struct","path":"EasyPrivateVoting::get_active_at_block_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EasyPrivateVoting::get_active_at_block_parameters","fields":[]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":32}}]},{"kind":"struct","path":"EasyPrivateVoting::get_admin_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EasyPrivateVoting::get_admin_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"EasyPrivateVoting::get_vote_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EasyPrivateVoting::get_vote_parameters","fields":[{"name":"candidate","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"EasyPrivateVoting::get_vote_ended_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EasyPrivateVoting::get_vote_ended_parameters","fields":[]}},{"name":"return_type","type":{"kind":"boolean"}}]},{"kind":"struct","path":"EasyPrivateVoting::process_message_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EasyPrivateVoting::process_message_parameters","fields":[{"name":"message_ciphertext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":17,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"message_context","type":{"kind":"struct","path":"aztec::messages::processing::message_context::MessageContext","fields":[{"name":"tx_hash","type":{"kind":"field"}},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"first_nullifier_in_tx","type":{"kind":"field"}},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}}]},{"kind":"struct","path":"EasyPrivateVoting::sync_private_state_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EasyPrivateVoting::sync_private_state_parameters","fields":[]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"EasyPrivateVoting"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"tally","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"vote_ended","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"active_at_block","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}}]}}]}]}},"file_map":{"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"mod test;\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract EasyPrivateVoting {\n    use dep::aztec::{\n        keys::getters::get_public_keys,\n        macros::{functions::{initializer, internal, private, public, utility}, storage::storage},\n    };\n    use dep::aztec::prelude::{AztecAddress, Map, PublicImmutable, PublicMutable};\n    use dep::aztec::protocol_types::{storage, traits::{Hash, ToField}};\n\n    #[storage]\n    struct Storage<Context> {\n        admin: PublicMutable<AztecAddress, Context>,\n        tally: Map<Field, PublicMutable<Field, Context>, Context>,\n        vote_ended: PublicMutable<bool, Context>,\n        active_at_block: PublicImmutable<u32, Context>,\n    }\n\n    #[initializer]\n    #[public]\n    fn constructor(admin: AztecAddress) {\n        storage.admin.write(admin);\n        storage.vote_ended.write(false);\n        storage.active_at_block.initialize(context.block_number());\n    }\n\n    #[private]\n    fn cast_vote(candidate: Field) {\n        let msg_sender_npk_m_hash = get_public_keys(context.msg_sender()).npk_m.hash();\n        let secret = context.request_nsk_app(msg_sender_npk_m_hash);\n        let nullifier = std::hash::pedersen_hash([context.msg_sender().to_field(), secret]);\n        context.push_nullifier(nullifier);\n\n        EasyPrivateVoting::at(context.this_address()).add_to_tally_public(candidate).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn add_to_tally_public(candidate: Field) {\n        assert(storage.vote_ended.read() == false, \"Vote has ended\");\n        let new_tally = storage.tally.at(candidate).read() + 1;\n        storage.tally.at(candidate).write(new_tally);\n    }\n\n    #[public]\n    fn end_vote() {\n        // assert(storage.vote_ended.read() == false, \"Vote has ended\");\n        assert(storage.admin.read().eq(context.msg_sender()), \"Only admin can end vote\");\n        storage.vote_ended.write(true);\n    }\n\n    #[utility]\n    unconstrained fn get_vote(candidate: Field) -> Field {\n        storage.tally.at(candidate).read()\n    }\n\n    #[utility]\n    unconstrained fn get_vote_ended() -> bool {\n        storage.vote_ended.read()\n    }\n\n    #[utility]\n    unconstrained fn get_admin() -> AztecAddress {\n        storage.admin.read()\n    }\n\n    #[utility]\n    unconstrained fn get_active_at_block() -> u32 {\n        storage.active_at_block.read()\n    }\n\n}\n","path":"/Users/ted/SuperData/working/research/aztec/private_voting/src/main.nr"},"63":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"64":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{\n    gas::GasOpts, private_context::PrivateContext, public_context::PublicContext,\n    returns_hash::ReturnsHash,\n};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\nuse crate::test::helpers::cheatcodes;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<N>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\npub trait TXEPublicCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEPrivateCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEUtilityCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self) -> T;\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n        returns\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n        returns\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"71":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        include_by_timestamp::IncludeByTimestamp,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: IncludeByTimestamp,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp =\n            IncludeByTimestamp::min_with_u64(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"72":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> u128 {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> u128 {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"74":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"77":{"source":"use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    // TODO(#2707): Consider making this a u64 as we already cast this to that when encoding the message. This would decrease\n    // the likelihood of collisions without any extra cost.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/event/event_selector.nr"},"79":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/hash.nr"},"96":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"101":{"source":"use crate::{\n    macros::{\n        authwits::AUTHWIT_TYPES,\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n    let process_message = generate_process_message();\n    generate_authwit_exports();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_authwit_exports() {\n    let authwits = AUTHWIT_TYPES.values();\n    authwits.for_each(|(s): TypeDefinition| { s.add_attribute(\"abi(authwits)\"); });\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"102":{"source":"use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"106":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"109":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"112":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ, _) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"114":{"source":"use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"115":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"116":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"117":{"source":"use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    prelude::AztecAddress,\n    utils::array,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT, hash::poseidon2_hash_with_separator_bounded_vec,\n    traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private_log` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr"},"118":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"119":{"source":"use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr"},"120":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"121":{"source":"use dep::protocol_types::{\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"137":{"source":"pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr"},"158":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"159":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"160":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"161":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"162":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"167":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"168":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"170":{"source":"use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(validateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(bulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr"},"172":{"source":"use crate::note::{\n    note_interface::NoteType,\n    retrieved_note::{RETRIEVED_NOTE_OVERHEAD, RetrievedNote, unpack_retrieved_note},\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; M],\n    _select_by_offsets: [u8; M],\n    _select_by_lengths: [u8; M],\n    _select_values: [Field; M],\n    _select_comparators: [u8; M],\n    _sort_by_indexes: [u8; M],\n    _sort_by_offsets: [u8; M],\n    _sort_by_lengths: [u8; M],\n    _sort_order: [u8; M],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec\n    _max_notes: u32,\n    // This is always set to NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD. We need to pass it to TS in order to be able to\n    // correctly construct the BoundedVec there.\n    _packed_retrieved_note_length: u32,\n) -> BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> {}\n\npub unconstrained fn get_notes<Note, let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<NOTE_PCKD_LEN>,\n{\n    // N + 3 because of the contract address, note nonce, and note_hash_counter that are stored out of the packed note.\n    let packed_retrieved_notes: BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> = get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        MAX_NOTES,\n        NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD,\n    );\n\n    let mut notes = BoundedVec::<_, MAX_NOTES>::new();\n    for i in 0..packed_retrieved_notes.len() {\n        let retrieved_note = unpack_retrieved_note(packed_retrieved_notes.get(i));\n        notes.push(retrieved_note);\n    }\n\n    // At last we convert the bounded vector to an array of options. We do this because that is what the filter\n    // function needs to have on the output and we've decided to have the same type on the input and output of\n    // the filter and preprocessor functions.\n    //\n    // We have decided to have the same type on the input and output of the filter and preprocessor functions because\n    // it allows us to chain multiple filters and preprocessors together.\n    //\n    // So why do we want the array of options on the output of the filter function?\n    //\n    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options\n    // allows setting values at known indices in the output array which is much more efficient than pushing to a\n    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted\n    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic\n    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor\n    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in\n    // an unconstrained context. We, however, use the same return value type to be able to use the same function as\n    // both a preprocessor and a filter.\n    let mut notes_array = [Option::none(); MAX_NOTES];\n    for i in 0..notes.len() {\n        if i < notes.len() {\n            notes_array[i] = Option::some(notes.get_unchecked(i));\n        }\n    }\n\n    notes_array\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"175":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"177":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: u32,\n    length: u32,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(address.to_field(), storage_slot, block_number, N)\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"179":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"187":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n    traits::Packable,\n};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    /// Initializes the value.\n    ///\n    /// # Panics\n    /// Panics if the value is already initialized.\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We emit an initialization nullifier to indicate that the struct is initialized. This also prevents\n        // the value from being initialized again as a nullifier can be included only once.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    /// Reads the value.\n    ///\n    /// # Panics\n    /// Panics if the value is not initialized.\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        assert(self.is_initialized(), \"Trying to read from uninitialized PublicImmutable\");\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n\n    /// Reads the value without checking if the value is initialized.\n    pub fn read_unsafe<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n\n    fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.nullifier_exists(nullifier, self.context.this_address())\n    }\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"188":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"202":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"205":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"206":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"208":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"209":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"211":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"213":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"218":{"source":"use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr"},"225":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/ted/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"},"243":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"286":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"303":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"304":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"318":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] != 0 };\n        consumed_counter = 1;\n    } else if typ.is_field() | typ.as_integer().is_some() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type, _) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type, _)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    let serialize_trait: TraitConstraint =\n        quote { Serialize<$serialized_len> }.as_trait_constraint();\n    quote {\n        impl $serialize_trait for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"320":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"321":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"331":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] != 0,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] != 0,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] != 0,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] != 0,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"342":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"356":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    #[inline_always]\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    #[inline_always]\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[O * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[i * O + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl<let N: u32> Deserialize<0> for () {\n    fn deserialize(_fields: [Field; 0]) -> Self {\n        ()\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    #[inline_always]\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..O {\n                fields[i * O + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[O * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    #[inline_always]\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"361":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as u8 as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as u16 as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as u32 as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as u64 as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"362":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T, let N: u32> Serialize<N + 1> for Option<T>\nwhere\n    T: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T, let N: u32> Deserialize<N + 1> for Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    fn deserialize(fields: [Field; N + 1]) -> Self {\n        if fields[0] == 1 {\n            let mut value_serialized: [Field; N] = std::mem::zeroed();\n            for i in 0..N {\n                value_serialized[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_serialized))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"380":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_padded_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_padded_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_padded_array::{\n    assert_sorted_transformed_i_padded_array_capped_size,\n    assert_sorted_transformed_padded_array_capped_size, validate_padded_items,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_padded_arrays::assert_split_transformed_padded_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"383":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/ted/nargo/github.com/AztecProtocol/aztec-packages/v1.1.2/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"393":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/Users/ted/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"}}}